# -*- coding: utf-8 -*-
"""Gantt_uruguai

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R2s56FO_80tCMAlipuIiTU0o8dF7kg-g
"""

import numpy as np
import pandas as pd
import plotly.figure_factory as ff
import plotly.graph_objects as go
from math import ceil, log


class Plot:

  def gantt(data, monthly=True):
      """
      Make a Gantt plot, which shows the temporal data availability for each station.
      Parameters
      ----------
      data : pandas DataFrame
          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station..
      monthly : boolean, default True
          Defines if the availability count of the data will be monthly to obtain a more fluid graph.
      Returns
      -------
      fig : plotly Figure
      """
      date_index = pd.date_range(data.index[0], data.index[-1], freq='D')
      data = data.reindex(date_index)
      periods = []
      for column in data.columns:
          series = data[column]
          if monthly:
              missing = series.isnull().groupby(pd.Grouper(freq='1MS')).sum().to_frame()
              series_drop = missing.loc[missing[column] < 7]  # A MONTH WITHOUT 7 DATA IS CONSIDERED A MISSING MONTH
              DELTA = 'M'
          else:
              series_drop = series.dropna()
              DELTA = 'D'
          if series_drop.shape[0] > 1:
              task = column
              resource = 'Dados disponiveis'
              start = str(series_drop.index[0].year) + '-' + str(series_drop.index[0].month) + '-' + str(
                  series_drop.index[0].day)
              finish = 0
              for i in range(len(series_drop)):
                  if i != 0 and round((series_drop.index[i] - series_drop.index[i - 1]) / np.timedelta64(1, DELTA),
                                      0) != 1:
                      finish = str(series_drop.index[i - 1].year) + '-' + str(
                          series_drop.index[i - 1].month) + '-' + str(
                          series_drop.index[i - 1].day)
                      periods.append(dict(Task=task, Start=start, Finish=finish, Resource=resource))
                      start = str(series_drop.index[i].year) + '-' + str(series_drop.index[i].month) + '-' + str(
                          series_drop.index[i].day)
                      finish = 0
              finish = str(series_drop.index[-1].year) + '-' + str(series_drop.index[-1].month) + '-' + str(
                  series_drop.index[-1].day)
              periods.append(dict(Task=task, Start=start, Finish=finish, Resource=resource))
          else:
              print('Station {} has no months with significant data'.format(column))

      periods = pd.DataFrame(periods)
      start_year = periods['Start'].apply(lambda x: int(x[:4])).min()
      finish_year = periods['Start'].apply(lambda x: int(x[:4])).max()
      colors = {'Dados disponiveis': 'rgb(255, 114, 0)'}
      fig = ff.create_gantt(periods, colors=colors, index_col='Resource', show_colorbar=True, showgrid_x=True,
                            showgrid_y=True, group_tasks=True)    
      fig.layout.xaxis.tickvals = pd.date_range('1/1/' + str(start_year), '12/31/' + str(finish_year + 1), freq='2AS')
      fig.layout.xaxis.ticktext = pd.date_range('1/1/' + str(start_year), '12/31/' + str(finish_year + 1),freq='2AS').year
  
      return fig